import fabio, os
from dateutil.parser import parse

def img2cbf(fake_img,keep_original=True):
	'''
	Converts fake images generated by MLFSOM from img to cbf
	Modifies cbf header according to header_contents file...
	so that it can be properly read by DISTL or DIALS
	If keep_original=False, deletes the original file
	For this to work, need to tweak fabio module a little (look for lines "I CHANGED HERE"):
	/Users/matt/Library/Enthought/Canopy/edm/envs/User/lib/python2.7/site-packages/fabio/cbfimage.py
	'''
	owd = os.getcwd()
	dirname = os.path.dirname(os.path.abspath(fake_img))
	basename = os.path.basename(fake_img)
	os.chdir(dirname) # change wd for now, change back to owd at the end

	ori_header = fabio.open(fake_img).header

	# Covert from img to cbf ***************************************
	cbf_temp = basename[0:-3]+'cbf'
	bash_2cbf = 'echo %s %s | 2cbf' %(basename,cbf_temp)
	os.system(bash_2cbf)

	# Modify header of cbf, otherwise DISTL won't work *************
	im = fabio.open(cbf_temp)
	'''
	with open(header_contents) as myfile:
	    content_lines = myfile.readlines()
	content_lines = [x.strip() for x in content_lines]
	contents = '\r\n'.join(content_lines)
	'''
	# extract pixel details from img header
	px_size = int(float(ori_header['PIXEL_SIZE'])*1000)
	beam_x_px = float(ori_header['BEAM_CENTER_X'])/(px_size/1000.)
	beam_y_px = float(ori_header['SIZE2'])-float(ori_header['BEAM_CENTER_Y'])/(px_size/1000.)
	#beam_y_px = float(ori_header['BEAM_CENTER_Y'])/(px_size/1000.)

	# prepare header contents for the output cbf file
	det_info = 'Detector: PILATUS3 6M, S/N 60-0127'
	date_info = parse(ori_header['DATE']).strftime("%Y-%m-%dT%H:%M:%S") + '.000'	
	px_info = 'Pixel_size %ie-6 m x %ie-6 m' %(px_size,px_size)
	thick_info = 'Silicon sensor, thickness 0.001000 m'
	exp_time_info = 'Exposure_time %.3f s' %(float(ori_header['TIME'])-0.001)
	exp_period_info = 'Exposure_period %.3f s' %(float(ori_header['TIME']))
	cnt_cutoff_info = 'Count_cutoff 1147141 counts'
	wave_info = 'Wavelength %.3f A' %(float(ori_header['WAVELENGTH']))
	det_dist_info = 'Detector_distance %.6f m' %(float(ori_header['DISTANCE'])/1000)
	beam_center_info = 'Beam_xy (%.2f, %.2f) pixels' %(beam_x_px,beam_y_px)
	start_angle_info = 'Start_angle %.2f deg.' %(float(ori_header['OSC_START']))
	angle_inc_info = 'Angle_increment %.2f deg.' %(float(ori_header['OSC_RANGE']))
	#phi_info = 'Phi 342.0000 deg.'
	#osc_axis_info = 'Oscillation_axis PHI'
	#n_osc_info = 'N_oscillations 1'

	'''
	content_lines = [det_info,date_info,px_info,thick_info,exp_time_info,exp_period_info,\
	cnt_cutoff_info,wave_info,det_dist_info,beam_center_info,start_angle_info,angle_inc_info,\
	phi_info,osc_axis_info,n_osc_info]
	'''
	content_lines = [det_info,date_info,px_info,thick_info,exp_time_info,exp_period_info,\
	cnt_cutoff_info,wave_info,det_dist_info,beam_center_info,start_angle_info,angle_inc_info]
	contents = '\r\n'.join(['# '+x for x in content_lines])

	im.header['_array_data.header_contents'] = contents
	im.update_header()
	cbf_out = cbf_temp  # overwrite temp file
	im.save(cbf_out)

	if not keep_original:
		os.remove(basename)

	os.chdir(owd)
